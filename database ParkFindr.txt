mysql -u root -p
show databases;
create database ParkFindr;
use ParkFindr;


CREATE TABLE IF NOT EXISTS user(
id int AUTO_INCREMENT,
full_name varchar(100) NOT NULL,
phone varchar(10) NOT NULL,
email varchar(100) NOT NULL,
password varchar(100) NOT NULL, 
PRIMARY KEY (id)
);


CREATE TABLE IF NOT EXISTS costumer (
    number INT AUTO_INCREMENT PRIMARY KEY,
    id_costumer INT NOT NULL,
    reservations_num INT NOT NULL,
    payments_num INT NOT NULL,
    FOREIGN KEY (id_costumer) REFERENCES user(id)
);



CREATE TABLE IF NOT EXISTS reservations ( 
reservation_id int AUTO_INCREMENT PRIMARY KEY,
costumer_id INT NOT NULL,    
date DATETIME,
duration_time INT NOT NULL,
FOREIGN KEY (costumer_id) REFERENCES costumer(id_costumer)
 );



CREATE TABLE IF NOT EXISTS calendar ( 
numOf int AUTO_INCREMENT PRIMARY KEY,
cos_id INT NOT NULL, 
content varchar(100) NOT NULL,
date DATETIME,
FOREIGN KEY (cos_id) REFERENCES costumer(id_costumer)
 );




CREATE TABLE IF NOT EXISTS chargers ( 
num int AUTO_INCREMENT PRIMARY KEY,
park_id INT NOT NULL,
includes varchar(100) NOT NULL,            (θα βαζουμε για yes ή no)
quantity INT NOT NULL,
FOREIGN KEY (park_id ) REFERENCES parking(id_parking)
 );



CREATE TABLE IF NOT EXISTS AMEA_spots ( 
num int AUTO_INCREMENT PRIMARY KEY,
id_park INT NOT NULL,
includes ENUM( 'yes' , 'no' ) NOT NULL,    ,            
quantity INT NOT NULL,
FOREIGN KEY (id_park ) REFERENCES parking(id_parking)
 );



CREATE TABLE IF NOT EXISTS payments ( 
number int AUTO_INCREMENT PRIMARY KEY,
cos_id INT NOT NULL,    
quantity INT NOT NULL,
deadline DATETIME,
FOREIGN KEY (cos_id) REFERENCES costumer(id_costumer)
 );



CREATE TABLE IF NOT EXISTS reviews ( 
number int AUTO_INCREMENT PRIMARY KEY,
cost_id INT NOT NULL,    
content varchar(100) NOT NULL,
FOREIGN KEY (cos_id) REFERENCES costumer(id_costumer)
 );



CREATE TABLE IF NOT EXISTS appVersion ( 
cost_id INT NOT NULL,    
version ENUM('free' , 'plus' , 'premium') NOT NULL,    
FOREIGN KEY (cos_id) REFERENCES costumer(id_costumer)
 );



CREATE TABLE IF NOT EXISTS reminders ( 
numofRem  int AUTO_INCREMENT PRIMARY KEY,
resId INT NOT NULL, 
duration INT NOT NULL,
FOREIGN KEY (resId) REFERENCES reservation(reservation_id)
 );



CREATE TABLE IF NOT EXISTS parking ( 
numOfParking int AUTO_INCREMENT PRIMARY KEY,
id_parking INT NOT NULL,
address varchar(100) NOT NULL,
password varchar(100) NOT NULL,
workHours varchar(100) NOT NULL,
FOREIGN KEY (id_parking) REFERENCES user(id)
 );



CREATE TABLE IF NOT EXISTS parkingSpots ( 
numOfSpots int AUTO_INCREMENT PRIMARY KEY,
parking_id INT NOT NULL,
spot INT NOT NULL,
state varchar(100) NOT NULL,
FOREIGN KEY (parking_id ) REFERENCES parking(id_parking)
 );



CREATE TABLE IF NOT EXISTS reservations ( 
reservation_id int AUTO_INCREMENT PRIMARY KEY,
costumer_id INT NOT NULL,    
date DATETIME,
FOREIGN KEY (costumer_id) REFERENCES costumer(id_costumer)
 );



CREATE TABLE IF NOT EXISTS reservation_details ( 
number int AUTO_INCREMENT PRIMARY KEY,
id_res INT NOT NULL, 
parking INT NOT NULL,    
state ENUM(‘now’ , ‘over’ , ‘canceled’) NOT NULL,    
date DATETIME,
duration INT NOT NULL,    (ή εδώ ή στις κρατήσεις , θα δουμε )
Spot INT NOT NULL,
FOREIGN KEY (id_res) REFERENCES reservations(reservation_id),
FOREIGN KEY (parking) REFERENCES parkingSpots(parking_id),
FOREIGN KEY (Spot) REFERENCES parkingSpots(spot)
 );



CREATE TABLE IF NOT EXISTS QR_code ( 
num int AUTO_INCREMENT PRIMARY KEY,
idRes INT NOT NULL,
FOREIGN KEY (idRes) REFERENCES reservations(reservation_id)
 );



CREATE TABLE IF NOT EXISTS Inform_parking ( 
num int AUTO_INCREMENT PRIMARY KEY,
idReserv INT NOT NULL,
numPark INT NOT NULL,
stateOfRes varchar(100) NOT NULL,
FOREIGN KEY (idReserv) REFERENCES reservations(reservation_id),
FOREIGN KEY (numPark) REFERENCES parking(id_parking)
 );





mysql -u root -p
show databases;
create database ParkFindr;
use ParkFindr;


CREATE TABLE IF NOT EXISTS user(
id int AUTO_INCREMENT,
full_name varchar(100) NOT NULL,
phone varchar(10) NOT NULL,
email varchar(100) NOT NULL,
password varchar(100) NOT NULL,
PRIMARY KEY (id)
);



CREATE TABLE IF NOT EXISTS customer(
number INT NOT NULL AUTO_INCREMENT,
id_customer INT NOT NULL,
password varchar(100) NOT NULL,
reservations_num INT NOT NULL,
payments_num INT NOT NULL,
PRIMARY KEY (number),
FOREIGN KEY (id_customer) REFERENCES user(id)
);



CREATE TABLE IF NOT EXISTS reservations ( 
reservation_id int AUTO_INCREMENT,
costumer_id INT NOT NULL,    
date DATETIME,
PRIMARY KEY(reservation_id),
FOREIGN KEY (costumer_id) REFERENCES costumer(id_costumer)
 );



CREATE TABLE IF NOT EXISTS calendar ( 
numOf int AUTO_INCREMENT,
cos_id INT NOT NULL, 
content varchar(100) NOT NULL,
date DATETIME,
PRIMARY KEY(numOf),
FOREIGN KEY (cos_id) REFERENCES costumer(id_costumer)
 );




CREATE TABLE IF NOT EXISTS chargers ( 
num int AUTO_INCREMENT,
park_id INT NOT NULL,
includes varchar(100) NOT NULL,            (θα βαζουμε για yes ή no)
quantity INT NOT NULL,
PRIMARY KEY(num),
FOREIGN KEY (park_id ) REFERENCES parking(id_parking)
 );



CREATE TABLE IF NOT EXISTS AMEA_spots ( 
num int AUTO_INCREMENT,
id_park INT NOT NULL,
includes ENUM( 'yes' , 'no' ) NOT NULL,    ,            
quantity INT NOT NULL,
PRIMARY KEY(num),
FOREIGN KEY (id_park ) REFERENCES parking(id_parking)
 );



CREATE TABLE IF NOT EXISTS payments ( 
number int AUTO_INCREMENT,
cos_id INT NOT NULL,    
quantity INT NOT NULL,
deadline DATETIME,
PRIMARY KEY(num),
FOREIGN KEY (cos_id) REFERENCES costumer(id_costumer)
 );



CREATE TABLE IF NOT EXISTS reviews ( 
number int AUTO_INCREMENT,
cost_id INT NOT NULL,    
content varchar(100) NOT NULL,
PRIMARY KEY(number),
FOREIGN KEY (cos_id) REFERENCES costumer(id_costumer)
 );



CREATE TABLE IF NOT EXISTS appVersion ( 
cost_id INT NOT NULL,    
version ENUM('free' , 'plus' , 'premium') NOT NULL,    
PRIMARY KEY(number),
FOREIGN KEY (cos_id) REFERENCES costumer(id_costumer)
 );



CREATE TABLE IF NOT EXISTS reminders ( 
numofRem  int AUTO_INCREMENT,
resId INT NOT NULL, 
duration INT NOT NULL,
PRIMARY KEY(numofRem),
FOREIGN KEY (resId) REFERENCES reservation(reservation_id)
 );



CREATE TABLE IF NOT EXISTS parking ( 
numOfParking int AUTO_INCREMENT,
id_parking INT NOT NULL,
address varchar(100) NOT NULL,
password varchar(100) NOT NULL,
workHours varchar(100) NOT NULL,
PRIMARY KEY(numOfParking),
FOREIGN KEY (id_parking) REFERENCES user(id)
 );



CREATE TABLE IF NOT EXISTS parkingSpots ( 
numOfSpots int AUTO_INCREMENT,
parking_id INT NOT NULL,
spot INT NOT NULL,
state varchar(100) NOT NULL,
PRIMARY KEY(numOfSpots),
FOREIGN KEY (parking_id ) REFERENCES parking(id_parking)
 );



CREATE TABLE IF NOT EXISTS reservations ( 
reservation_id int AUTO_INCREMENT,
costumer_id INT NOT NULL,    
date DATETIME,
PRIMARY KEY(reservation_id),
FOREIGN KEY (costumer_id) REFERENCES costumer(id_costumer)
 );



CREATE TABLE IF NOT EXISTS reservation_details ( 
number int AUTO_INCREMENT,
id_res INT NOT NULL, 
parking INT NOT NULL,    
state ENUM(‘now’ , ‘over’ , ‘canceled’) NOT NULL,    
date DATETIME,
duration INT NOT NULL,    (ή εδώ ή στις κρατήσεις , θα δουμε )
Spot INT NOT NULL,
PRIMARY KEY(numofRem),
FOREIGN KEY (id_res) REFERENCES reservations(reservation_id),
FOREIGN KEY (parking) REFERENCES parkingSpots(parking_id),
FOREIGN KEY (Spot) REFERENCES parkingSpots(spot)
 );



CREATE TABLE IF NOT EXISTS QR_code ( 
num int AUTO_INCREMENT,
idRes INT NOT NULL,
PRIMARY KEY(num),
FOREIGN KEY (idRes) REFERENCES reservations(reservation_id)
 );



CREATE TABLE IF NOT EXISTS Inform_parking ( 
num int AUTO_INCREMENT,
idReserv INT NOT NULL,
numPark INT NOT NULL,
stateOfRes varchar(100) NOT NULL,
PRIMARY KEY(num),
FOREIGN KEY (idReserv) REFERENCES reservations(reservation_id),
FOREIGN KEY (numPark) REFERENCES parking(id_parking)
 );


CREATE TABLE reviews (
    id INT AUTO_INCREMENT PRIMARY KEY,
    review_text TEXT NOT NULL,
    rating INT NOT NULL,
    review_for VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


